// data_2d.cpp: data definition for 2D auto-meshers

//////////////////////////////////////////////////////////////////////////////////
// Shin Dae-Seock (dsshin@midasIT.com)
// Don't believe in magic;
// understand what your libraries do, how they do it, and at what cost they do it.
//////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"

#include "data_2d.h"
#include "Math_Lib.h"

/////////////////////////////////////////////////////////////////////
using namespace data_2d;
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
int Node   ::_n_node_id    = 1;
int Element::_n_element_id = 1;
#endif
/////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
double Element::get_distortion_metric() const
{
    using namespace mesher_math_lib;
    /////////////////////////////////////////////
    const double* a_uv_1 = _v_p_node[0]->get_uv();
    const double* a_uv_2 = _v_p_node[1]->get_uv();
    const double* a_uv_3 = _v_p_node[2]->get_uv();
    /////////////////////////////////////////////
    if ((int)_v_p_node.size() == 3) return distortion_metric_2d(a_uv_1, a_uv_2, a_uv_3);
    /////////////////////////////////////////////
    const double* a_uv_4 = _v_p_node[3]->get_uv();
    return distortion_metric_2d(a_uv_1, a_uv_2, a_uv_3, a_uv_4);
} // end: Element::get_distortion_metric()
/////////////////////////////////////////////////////////////////////
